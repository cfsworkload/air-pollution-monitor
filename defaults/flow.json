[
    {
      "type": "tab",
      "id": "7687703.43b0b9",
      "label": "Fiware: COConcentration"
    },
    {
      "type": "tab",
      "label": "API",
      "id": "62906b0d.3c9e8c",
      "z": "62906b0d.3c9e8c"
    },
    {
        "id": "946d41d.974cf4",
        "method": "POST",
        "name": "Retrieve FIWARE/Orion Events",
        "ret": "obj",
        "type": "http request",
        "url": "http://orion.lab.fiware.org:1026/v1/queryContext?limit=300&details=on",
        "wires": [
            [
                "1b5a44a5.d5158b"
            ]
        ],
        "x": 564,
        "y": 206,
        "z": "7687703.43b0b9"
    },
    {
        "func": "msg.headers = {\n \"X-Auth-Token\": context.global.fitoken,\n \"Accept\": \"application/json\"\n}\nmsg.payload = {\n \"entities\": [\n {\n \"type\": \"santander:device\",\n \"isPattern\": \"true\",\n \"id\": \".*fixed.*\"\n }\n ],\n \"attributes\" : [\"Latitud\", \"Longitud\", \"COConcentration\", \"TimeInstant\"],\n \"restriction\": {\n \"scopes\": [\n {\n \"type\": \"FIWARE::StringQuery\",\n \"value\": \"+COConcentration\"\n }\n ]\n }\n}\nreturn msg;",
        "id": "aaaf9f6.85a1c6",
        "name": "Prepare FIWARE/Orion Query",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "946d41d.974cf4"
            ]
        ],
        "x": 418,
        "y": 299,
        "z": "7687703.43b0b9"
    },
    {
        "active": false,
        "complete": "payload",
        "console": "false",
        "id": "29356f4c.001278",
        "name": "",
        "type": "debug",
        "wires": [],
        "x": 977,
        "y": 107,
        "z": "7687703.43b0b9"
    },
    {
        "crontab": "",
        "id": "999e52d8.4b674",
        "name": "Events retrieval: EVERY 10 MINUTES",
        "once": true,
        "payload": "",
        "payloadType": "date",
        "repeat": "600",
        "topic": "",
        "type": "inject",
        "wires": [
            [
                "7833bd41.27f9c4"
            ]
        ],
        "x": 189,
        "y": 207,
        "z": "7687703.43b0b9"
    },
    {
        "func": "ctxs=msg.payload.contextResponses;\nvar objs = [];\nfor (i=0; i<ctxs.length;i++) {\n    ctx = ctxs[i].contextElement;\n    var obj = {\"id\": ctx.id};\n    // store id and set of key-value pairs reflecting names and values \n    // of attributes (skipping types, metadata, etc)\n    for (j=0; j<ctx.attributes.length; j++) {\n        att = ctx.attributes[j];\n        obj[att.name]=att.value;\n    }\n    objs.push(obj);\n}\nmsg.payload = objs;\n\nreturn msg;",
        "id": "1b5a44a5.d5158b",
        "name": "Parse & reformat events",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "22985c62.9ee484"
            ]
        ],
        "x": 720.5,
        "y": 308,
        "z": "7687703.43b0b9"
    },
    {
        "id": "22985c62.9ee484",
        "name": "split array into elements",
        "property": "payload",
        "type": "splitter",
        "wires": [
            [
                "b8c40a8.28d28f8",
                "29356f4c.001278",
                "aa8af7e2.adf958"
            ]
        ],
        "x": 849,
        "y": 187,
        "z": "7687703.43b0b9"
    },
    {
        "cloudant": "",
        "database": "stdco",
        "id": "b8c40a8.28d28f8",
        "name": "Store in Cloudant: STDCO",
        "operation": "insert",
        "payonly": true,
        "service": "fiware-app-build-kpave1-3-a5-cloudant",
        "type": "cloudant out",
        "wires": [],
        "x": 1130,
        "y": 186,
        "z": "7687703.43b0b9"
    },
    {
        "drop": false,
        "id": "7833bd41.27f9c4",
        "name": "",
        "pauseType": "delay",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "type": "delay",
        "wires": [
            [
                "aaaf9f6.85a1c6"
            ]
        ],
        "x": 178,
        "y": 296,
        "z": "7687703.43b0b9"
    },
    {
        "id": "698042d2.62dad4",
        "name": "",
        "service": "fiware-app-build-kpave1-3-a5-dashDB",
        "table": "STDCODB",
        "type": "dashDB out",
        "wires": [],
        "x": 1027,
        "y": 301,
        "z": "7687703.43b0b9"
    },
    {
        "func": "i = msg.payload;\nmsg.payload = {\n  \"ID\": i.id,\n  \"LATITUD\": parseFloat(i.Latitud),\n  \"LONGITUD\": parseFloat(i.Longitud),\n  \"TIMEINSTANT\": i.TimeInstant.slice(0, 19).replace('T', ' '),\n  \"COCONCENTRATION\": parseFloat(i.COConcentration)\n};\nreturn msg;\n",
        "id": "aa8af7e2.adf958",
        "name": "transofrm to SQL-typed objects",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "698042d2.62dad4"
            ]
        ],
        "x": 958,
        "y": 383,
        "z": "7687703.43b0b9"
    },
    {
        "id": "a5a72a5e.150b18",
        "method": "post",
        "name": "",
        "swaggerDoc": "",
        "type": "http in",
        "url": "/auth",
        "wires": [
            [
                "f2495a48.46a448"
            ]
        ],
        "x": 125,
        "y": 39,
        "z": "7687703.43b0b9"
    },
    {
        "func": "token = msg.payload.token;\nif (token !== context.global.fitoken){\n    node.warn(\"Token: \" + token + \" != \" + context.global.fitoken);\n    msg.statusCode = 401;\n}\nreturn msg;",
        "id": "f2495a48.46a448",
        "name": "validate token",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "180797db.a7b198",
                "312457eb.03dcf8"
            ]
        ],
        "x": 312,
        "y": 39,
        "z": "7687703.43b0b9"
    },
    {
        "id": "180797db.a7b198",
        "name": "",
        "type": "http response",
        "wires": [],
        "x": 555,
        "y": 39.5,
        "z": "7687703.43b0b9"
    },
    {
        "id": "a10dc789.0edde8",
        "method": "post",
        "name": "",
        "swaggerDoc": "",
        "type": "http in",
        "url": "/login",
        "wires": [
            [
                "1178d2.f7469f2e"
            ]
        ],
        "x": 128,
        "y": 461,
        "z": "7687703.43b0b9"
    },
    {
        "func": "body=msg.payload;\nnode.log(JSON.stringify(body));\ncontext.global.user = body.user;\ncontext.global.password = body.password;\n\nmsg.headers = {\n \"Accept\": \"application/json\"\n}\n\nmsg.payload = {\n \"username\": body.user,\n \"password\": body.password\n}\n\n\nreturn msg;",
        "id": "1178d2.f7469f2e",
        "name": "save credentials to globals",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "35b6afab.ae1c7"
            ]
        ],
        "x": 354,
        "y": 462.5,
        "z": "7687703.43b0b9"
    },
    {
        "id": "8a1d8912.3722a",
        "name": "",
        "type": "http response",
        "wires": [],
        "x": 847,
        "y": 579.5,
        "z": "7687703.43b0b9"
    },
    {
        "id": "35b6afab.ae1c7",
        "method": "POST",
        "name": "Get token from FIWARE/Orion",
        "ret": "txt",
        "type": "http request",
        "url": "https://orion.lab.fiware.org/token",
        "wires": [
            [
                "cb94a294.e02c48"
            ]
        ],
        "x": 256,
        "y": 580.5,
        "z": "7687703.43b0b9"
    },
    {
        "func": "token=msg.payload;\ncontext.global.fitoken = token;\ncontext.global.firstTime = true;\nreturn msg;",
        "id": "cb94a294.e02c48",
        "name": "save token to globals",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "cf56d33.159c53",
                "8a1d8912.3722a",
                "aaaf9f6.85a1c6"
            ]
        ],
        "x": 595,
        "y": 578.5,
        "z": "7687703.43b0b9"
    },
    {
        "active": true,
        "complete": "payload",
        "console": "false",
        "id": "cf56d33.159c53",
        "name": "",
        "type": "debug",
        "wires": [],
        "x": 902,
        "y": 484.5,
        "z": "7687703.43b0b9"
    },
    {
        "func": "if (!context.global.firstTime){\n    return msg;\n}else{\n    context.global.firstTime = false;\n}",
        "id": "312457eb.03dcf8",
        "name": "isLoading",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "aaaf9f6.85a1c6"
            ]
        ],
        "x": 430,
        "y": 124,
        "z": "7687703.43b0b9"
    },
    {
        "id": "ad1411c5.11aa78",
        "path": "/ws/comap",
        "type": "websocket-listener",
        "wholemsg": "false",
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "3e22f09e.7cfc3",
        "method": "POST",
        "name": "Get token from FIWARE/Orion",
        "ret": "txt",
        "type": "http request",
        "url": "https://orion.lab.fiware.org/token",
        "wires": [
            [
                "c7e661dc.fb5dc8"
            ]
        ],
        "x": 605,
        "y": 95,
        "z": "62906b0d.3c9e8c"
    },
    {
        "func": "msg.headers = {\n \"Accept\": \"application/json\"\n}\n\nmsg.payload = {\n \"username\": context.global.user,\n \"password\": context.global.password\n}\n\nreturn msg;",
        "id": "8f9afbc8.88034",
        "name": "Prepare auth request",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "3e22f09e.7cfc3"
            ]
        ],
        "x": 390,
        "y": 35,
        "z": "62906b0d.3c9e8c"
    },
    {
        "crontab": "",
        "id": "70d229fc.67c4f",
        "name": "Token renewal: EVERY 60 MINUTES",
        "once": true,
        "payload": "",
        "payloadType": "date",
        "repeat": "3600",
        "topic": "",
        "type": "inject",
        "wires": [
            [
                "8f9afbc8.88034"
            ]
        ],
        "x": 177,
        "y": 94,
        "z": "62906b0d.3c9e8c"
    },
    {
        "func": "token=msg.payload\ncontext.global.fitoken = token\nreturn msg;",
        "id": "c7e661dc.fb5dc8",
        "name": "save token to globals",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "438ea610.dfceb8"
            ]
        ],
        "x": 783,
        "y": 40,
        "z": "62906b0d.3c9e8c"
    },
    {
        "active": false,
        "complete": "payload",
        "console": "false",
        "id": "438ea610.dfceb8",
        "name": "",
        "type": "debug",
        "wires": [],
        "x": 916,
        "y": 96,
        "z": "62906b0d.3c9e8c"
    },
    {
        "func": "//var services = JSON.parse(context.global.VCAP_SERVICES);\nnode.log(\"context.global.VCAP_SERVICES: \" + context.global.VCAP_SERVICES)\nvar services = context.global.VCAP_SERVICES\nvar bundleUri = null;\nvar reportingUri = \"\";\nvar reportingUserId = \"\";\nvar reportingPassword = \"\";\n\nObject.keys(services).forEach(function(key) {\n\tvar name = key.toString().toUpperCase();\n\tvar credentials = services[key][0]['credentials'];\n\tif (name.indexOf('ERSERVICE') !== -1) {\n\t\treportingUri = credentials['url'];\n\t\treportingUserId = credentials['userid'];\n\t\treportingPassword = credentials['password'];\n\t}\n\telse if ((name.indexOf(\"CLOUDANT\") !== -1) && (bundleUri === null)) {\n\t\tbundleUri = credentials['url'];\n\t}\n});\n\n// ERS connection constructor\nfunction callERS(ersUri, username, password, bundleUri) {\n\tvar url = context.global.URL;\n\tvar ersContextRoot = null;\n\tvar cookieJar = \"\";\n\t// return appropriate connection depending on whether reporting\n\t// service is listening on http or https\n\tvar getConnection = function(uri) {\n\t\tif (url.parse(uri).protocol === 'https:') {\n\t\t\treturn context.global.HTTPS;\n\t\t} else {\n\t\t\treturn context.global.HTTP;\n\t\t}\n\t};\n\t// returns the host name of the reporting service\n\tvar getHost = function(uri) {\n\t\treturn url.parse(uri).hostname;\n\t};\n\t// returns the port of the reporting service\n\tvar getPort = function(uri) {\n\t\tif (url.parse(uri).protocol === 'https:') {\n\t\t\treturn (url.parse(uri).port || 443);\n\t\t} else {\n\t\t\treturn (url.parse(uri).port || 80);\n\t\t}\n\t};\n\t// set the context root that will be used as a prefix on URLs generated by ERS.\n\tthis.setContextRoot = function(contextRoot) {\n\t\tersContextRoot = contextRoot;\n\t};\n\t\t\n\t// setup connection information for reporting service\n\tvar ersHost = getHost(ersUri);\n\tvar ersPort = getPort(ersUri);\n\tvar ersConnection = getConnection(ersUri);\n\tvar ersAuth = username + ':' + password;\n\tvar ersBundleUri = bundleUri;\n\t// connects to the reporting service and retrieves a connection id\n\t// for the specified bundle uri. If a callback has been specified,\n\t// the original request and response are provided so that a retry\n\t// of the original request can be attempted.\n\tthis.doConnect = function(clientRequest, clientResponse, callback, ers) {\n\t\tif(cookieJar !== \"\"){\n\t\t\tcookieJar = \"\";\n\t\t}\n\t\tvar responseCallback = function(ersResponse) {\n\t\t\tvar str = '';\n            \n\t\t\tersResponse.on('data', function(chunk) {\n\t\t\t\tstr += chunk;\n\t\t\t});\n            \n\t\t\tersResponse.on('end', function() {\n\t\t\t\tvar ersHeaders = ersResponse.headers;\n\t\t\t\tfor ( var headerName in ersHeaders) {\n\t\t\t\t\tvar headerValue = ersHeaders[headerName];\n\t\t\t\t\tif (headerName === 'set-cookie') {\n\t\t\t\t\t\tfor (idx = 0; idx < headerValue.length; idx++) {\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar cookie = headerValue[idx].substring(0, headerValue[idx].indexOf(';') + 1);\n\t\t\t\t\t\t\tcookieJar += cookie;\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (callback) {\n\t\t\t\t\treturn callback(ersResponse.statusCode, clientRequest, clientResponse, ers);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tvar options = {\n\t\t\thost : ersHost,\n\t\t\tport : ersPort,\n\t\t\tpath : '/ers/v1/connection',\n\t\t\tmethod : 'POST',\n\t\t\tauth : ersAuth\n\t\t};\n\t\t\n\t\tvar ersRequest = ersConnection.request(options, responseCallback);\n\t\tnode.log(ersRequest);\n\t\t\n\t\tersRequest.setHeader('Content-Type', 'application/json');\n\t\tersRequest.on('error', function(e) {\n\t\t\tif (callback) {\n\t\t\t\treturn callback(503, clientRequest, clientResponse, ers);\n\t\t\t}\n\t\t});\n\t\tersRequest.write(\"{}\");\n\t\tersRequest.end();\n\t};\n\n\tthis.getCookieJar = function(){\n\t\treturn cookieJar;\n\t};\n}\n\nvar ersConnection = new callERS(reportingUri, reportingUserId, reportingPassword, bundleUri);\nersConnection.doConnect(null, null, function(statusCode, clientRequest, clientResponse, ers){\n    context.global.cookie = ersConnection.getCookieJar();\n    msg.headers = {\"Cookie\": ersConnection.getCookieJar()}\n    msg.url = reportingUri + \"/ers/v1/definitions\";\n    node.error(\"URL: \" + msg.url);\n    node.error(\"COOKIE: \" + context.global.cookie);\n    return msg;\n}, null);\n\n//must return msg here as well although it doesn't contain cookies yet\nreturn msg;",
        "id": "788dfda8.98f924",
        "name": "create-connection",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "b5af7fbe.2a85f8",
                "95c8535d.dc71b"
            ]
        ],
        "x": 298.00001525878906,
        "y": 482.9999694824219,
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "2adff13a.5f361e",
        "method": "GET",
        "name": "Get report",
        "ret": "bin",
        "type": "http request",
        "url": "",
        "wires": [
            [
                "4006d1c5.96cb7"
            ]
        ],
        "x": 902.000244140625,
        "y": 488.9999084472656,
        "z": "62906b0d.3c9e8c"
    },
    {
        "drop": false,
        "id": "b5af7fbe.2a85f8",
        "name": "Wait 2 seconds for connection setup",
        "pauseType": "delay",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "type": "delay",
        "wires": [
            [
                "e71da423.436078"
            ]
        ],
        "x": 468.00006103515625,
        "y": 416.9998779296875,
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "1fd45940.288167",
        "method": "get",
        "name": "",
        "swaggerDoc": "",
        "type": "http in",
        "url": "/report",
        "wires": [
            [
                "788dfda8.98f924"
            ]
        ],
        "x": 89.00013732910156,
        "y": 482.9999084472656,
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "4006d1c5.96cb7",
        "name": "",
        "type": "http response",
        "wires": [],
        "x": 1079.000244140625,
        "y": 488.9999084472656,
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "e71da423.436078",
        "method": "GET",
        "name": "get definitions",
        "ret": "obj",
        "type": "http request",
        "url": "",
        "wires": [
            [
                "f23e0a62.472598"
            ]
        ],
        "x": 644.0001220703125,
        "y": 486.9999084472656,
        "z": "62906b0d.3c9e8c"
    },
    {
        "func": "var REPORT_DEFINITION_NAME = \"fidef\";\n\nvar reportingUri = \"\";\n\nObject.keys(context.global.VCAP_SERVICES).forEach(function(key) {\n\tvar name = key.toString().toUpperCase();\n\tif (name.indexOf('ERSERVICE') !== -1) {\n\t\treportingUri = context.global.VCAP_SERVICES[key][0].credentials.url;\n\t}\n});\n\nnode.error(\"RRRRRRRR: \" + JSON.stringify(msg.payload));\n\nfor (var i in msg.payload) {\n    if (msg.payload[i].name === REPORT_DEFINITION_NAME) {\n        msg.url = reportingUri + msg.payload[i].url + \"/reports/pdf\";        \n        node.log(\"setting msg.url to: \" + msg.url);\n        msg.headers.Cookie = context.global.cookie;\n        return msg;\n    }\n}\n\nnode.error(\"Couldn't find report definition with name \" + REPORT_DEFINITION_NAME);\n",
        "id": "f23e0a62.472598",
        "name": "Find report definition",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "2adff13a.5f361e"
            ]
        ],
        "x": 779.0001220703125,
        "y": 418.9998474121094,
        "z": "62906b0d.3c9e8c"
    },
    {
        "active": true,
        "complete": "payload",
        "console": "false",
        "id": "95c8535d.dc71b",
        "name": "",
        "type": "debug",
        "wires": [],
        "x": 432,
        "y": 535.9999694824219,
        "z": "62906b0d.3c9e8c"
    },
    {
        "active": false,
        "complete": "payload",
        "console": "false",
        "id": "343a9d15.a4183a",
        "name": "",
        "type": "debug",
        "wires": [],
        "x": 822,
        "y": 218,
        "z": "62906b0d.3c9e8c"
    },
    {
        "client": "",
        "id": "e75f2914.74a2c8",
        "name": "WS for map view",
        "server": "ad1411c5.11aa78",
        "type": "websocket in",
        "wires": [
            [
                "ccae4e44.3189b"
            ]
        ],
        "x": 100,
        "y": 223,
        "z": "62906b0d.3c9e8c"
    },
    {
        "client": "",
        "id": "c672a345.9bfd18",
        "name": "WS reply",
        "server": "ad1411c5.11aa78",
        "type": "websocket out",
        "wires": [],
        "x": 914,
        "y": 285,
        "z": "62906b0d.3c9e8c"
    },
    {
        "cloudant": "",
        "database": "stdco",
        "design": "stdco",
        "id": "f833e7b4.4b6ea8",
        "index": "comap",
        "name": "Query CO data from the db: STDCO",
        "search": "_idx_",
        "service": "fiware-app-build-kpave1-3-a5-cloudant",
        "type": "cloudant in",
        "wires": [
            [
                "b4a17928.f7abd8"
            ]
        ],
        "x": 439,
        "y": 223,
        "z": "62906b0d.3c9e8c"
    },
    {
        "func": "msg.payload = {query: \"*:*\"};\nreturn msg;",
        "id": "ccae4e44.3189b",
        "name": "Cloudand query",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "f833e7b4.4b6ea8"
            ]
        ],
        "x": 242,
        "y": 281,
        "z": "62906b0d.3c9e8c"
    },
    {
        "func": "inp = msg.payload;\nvar outp = [];\nfor(i=0 ; i<inp.length ; i++) {\n    ielem = inp[i];\n    id = ielem.id;\n    val = parseFloat(ielem.COConcentration);\n    var found = false;\n    oelem = {\n        \"ID\": ielem.id, \n        \"LAT\": ielem.Latitud,\n        \"LNG\": ielem.Longitud,\n        \"VAL\": val,\n        \"CNT\": 1\n    };\n    for (j=0;j<outp.length;j++) {\n        if (outp[j].ID == inp[i].id) {\n            // we already have this ID in outp\n            found = true;\n            // calculate rolling average\n            cnt = outp[j].CNT;\n            outp[j].VAL = (outp[j].VAL*cnt + val) / (cnt+1);\n            outp[j].CNT = cnt+1;\n            break;\n        } \n    }\n    if (!found) {\n        // add new element to outp\n        outp.push(oelem);\n    }\n}\nmsg.payload = outp;\nreturn msg;",
        "id": "b4a17928.f7abd8",
        "name": "aggregate results (average CO)",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "c672a345.9bfd18",
                "343a9d15.a4183a"
            ]
        ],
        "x": 674,
        "y": 282,
        "z": "62906b0d.3c9e8c"
    },
    {
        "checkall": "true",
        "id": "fab60ecc.77fe68",
        "name": "",
        "outputs": 2,
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "type": "switch",
        "wires": [
            [
                "24e31954.87a966"
            ],
            [
                "40b89727.cf9fa8"
            ]
        ],
        "x": 648,
        "y": 698,
        "z": "62906b0d.3c9e8c"
    },
    {
        "active": false,
        "complete": "payload",
        "console": "true",
        "id": "1d47d83d.7c419",
        "name": "",
        "type": "debug",
        "wires": [],
        "x": 664,
        "y": 629,
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "b5a798fe.0bb3a8",
        "method": "get",
        "name": "",
        "swaggerDoc": "",
        "type": "http in",
        "url": "/wait4data",
        "wires": [
            [
                "51cf8f90.19eed8"
            ]
        ],
        "x": 100,
        "y": 698,
        "z": "62906b0d.3c9e8c"
    },
    {
        "func": "node.log(\"LENGTH: \" + msg.payload.length);\nmsg.payload = msg.payload['1'];\nreturn msg;",
        "id": "b7e247a6.fb01",
        "name": "log length",
        "noerr": 0,
        "outputs": 1,
        "type": "function",
        "wires": [
            [
                "1d47d83d.7c419",
                "fab60ecc.77fe68"
            ]
        ],
        "x": 461,
        "y": 698,
        "z": "62906b0d.3c9e8c"
    },
    {
        "drop": false,
        "id": "24e31954.87a966",
        "name": "",
        "pauseType": "delay",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "type": "delay",
        "wires": [
            [
                "51cf8f90.19eed8"
            ]
        ],
        "x": 457,
        "y": 807,
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "40b89727.cf9fa8",
        "name": "",
        "type": "http response",
        "wires": [],
        "x": 869,
        "y": 706,
        "z": "62906b0d.3c9e8c"
    },
    {
        "id": "51cf8f90.19eed8",
        "name": "",
        "params": "",
        "query": "SELECT COUNT (*) FROM STDCODB;",
        "service": "fiware-app-build-kpave1-3-a5-dashDB",
        "type": "dashDB in",
        "wires": [
            [
                "b7e247a6.fb01"
            ]
        ],
        "x": 291,
        "y": 698,
        "z": "62906b0d.3c9e8c"
    }
]
